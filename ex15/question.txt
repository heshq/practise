模版写出来就是为了大规模调用的，所以模版设计实际上也包含了接口设计，这道题目主要练习模板设计。
好的模版能让用户：
编写更少的代码（方便写）
编写更直观的代码（方便读）
编写更高效的代码（所有模版运算在编译期完成，程序运行时没有额外负担）
编写更准确的代码（错误的调用方式，在编译期就能发现）
下面的5道题目，都要求使用模板完成，不强求但是要尽量满足上述效果。

题目1
程序员经常需要在代码里使用二进制、八进制、十六进制和十进制的整数。由于历史上的疏忽，C语言仅支持八进制、十六进制和十进制的字面常量。为了解决这一问题，人们发明了C++。 [来源请求]
请提供一个模板，供程序员在代码中直接编写二进制整数常量。

题目2
程序经常需要在一个数据结构上进行遍历，找出其中特定的元素。由于语法的限制，C语言仅内建提供数组这一种数据结构。为了解决这一问题，人们发明了C++。 [来源请求]
C++不但提供了一系列STL容器，还提供了一系列常用算法[1]，这些算法可以不但可以在任何stl容器上使用，还支持数组。
请提供两个算法，能够应用到数组和stl容器上，一个用于找到数据结构里的最大值，一个用于找到最小值。

进一步的要求：升级你的算法，以支持在调用时传入自定义的比较函数。

题目3
C语言在对不同的POD数据类型进行双目运算时，会进行类型提升[2]。然而在类型提升时，被提升的数据可能会丢失信息。这就导致比较运算[3]有时会得出反直觉的结果。
例如，一个int数据与unsigned数据比较时，如果int数据带有负值，经过整型提升，负值就会变为正值。
又例如，一个float数据与double数据都带有同样的值，它们比较时，float被提升为double，提升时多出来的位数会补零，导致结果有截断误差[4]。
为了解决这个问题，人们发明了C++。 [来源请求]
请提供一套比较函数，能够避免上述问题地比较各种整型和浮点类型数据。
另外，gcc会对有符号和无符号数据之间的比较操作报warning，由于这道题目的特殊目的，允许无视这条warning。

题目4
众所周知，判断一个数是否为质数的最快的算法是：问问知道的人。[来源请求]
在C语言中，应用这一算法的唯一途径，就问了知道的人之后，把数据一个一个地填入初始化列表内，保存在一个特定的数组上，供程序运行时调用。
这一实现有个致命的缺陷：实际上很难找到一个能背出质数表的人。当然另外还有其他的一些小问题。为了解决这些问题，人们发明了C++。 [来源请求]
请提供一个工具，在程序内提供1000以内所有整数是否为质数的信息，并且不产生额外的运行期计算。

题目5
由于历史上英国跟法国长期闹别扭，英国人一直没有完全接受起源于法国的“公制”单位。虽然法国人送给美国人一座很大的美女雕像，但重视zhuangbility的美国人不为所动，仍然长期死守英制。[来源请求]
美国人的这种执念最终导致了1998年的“火星气候探测器”（MCO）由于软件中单位未正确转换而坠毁在火星上。[5]
虽然当时的QA人员没有按照行业规范，对bug进行复现、修复、和回归测试 [来源请求]，但是程序中数据单位容易错乱的问题是确实存在的。为了解决这些问题，人们发明了C++。[来源请求]
请提供一个给普通数据类型[6]增加单位的工具，如果代码里让不同单位的数据进行加减或比较运算，就直接报单位错误。
乘除运算涉及到单位转换，这里不要求你的工具能自动进行单位转换，但要求你强制用户在做单位转换时写明单位。
前面都搞砸了，我靠！！！！
明确的要求：
1. 用户可以使用任何合理的单位（所以你可以考虑一下在struct MS里面，把世界上所有单位都提供一下）
2. 用户可以使用任何合理的数据类型(除了int、long、float、unsigned、这些基本类型，还可能有用户自己实现的类型，比如BigNumber)
3. 除非所有参与运算的数据,单位都是一致的，否则必须显式标注单位(加减除外)
如果用户实现了一个BigNumber，那么只要他自己做了BigNumber与普通类型的加减运算符重载，那就带上单位以后也要支持
如果用户的BigNumber提供了与普通类型的比较运算符重载，同样要支持
还有赋值运算，都一样

注释：
[1] C++标准库算法见：http://www.cplusplus.com/reference/algorithm/
[2] C语言类型提升规则见：https://www.eskimo.com/~scs/cclass/int/sx4cb.html
[3] 比较运算包括："<","<=",">",">=","==","!="，一共6种
[4] 浮点截断误差的例子见附件：float.cpp
[5] MCO飞船和事故介绍见：http://en.wikipedia.org/wiki/Mars_Climate_Orbiter
[6] 这里的“普通数据类型”包括：char、short、int、long、long long的有、无符号版本，以及float、double、long double三种浮点数