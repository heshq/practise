原则上，这些递归训练题不强求你用递归实现。但是，用递归实现它们会比其他方法容易很多。

递归题目A 表达式求值
C语言程序的大部分功能是通过表达式表达的。现在，只考虑int类型字面数据，请实现一个表达式计算器。
要求：
读入终端输入，例如：“ ( 1 + 7 / 2 ) % 2 ”，打印计算结果，例如：“0”。输入的每一行代表一个表达式。
由于运算数都是字面整型，所以函数调用运算符（“()”）、下标运算符（“[]”）、取地址和解引用运算符（“&”、“*”、“->”）、自增自减和赋值运算符（“=”、“+=”、“++”、……）都不用考虑
需要支持算术运算符（“+”、“-”、“*”、“/”、“%”）、位运算符（“>>”、“&”、“^”、“~”、……）、布尔运算符（“!”、“&&”、“||”）、比较运算符（“<”、“>=”、“!=”、……）、三目运算符（“?:”）
需要支持括号。
支持的数据范围、运算结果、运算的优先级，都以c语言int类型数据的对应运算为准。
在表达式求值过程中，如果出现错误，需要给出相应的错误提示。不管遇到怎样的输入，你的程序不能崩溃，不能泄漏。






附件里是完整的表达式计算器工程，在mac、linux、或者cygwin下应该可以直接make（当然前提是你要安装了make）。
Makefile 默认会编译带优化的 calc.exe，也就是表达式计算器程序，在终端下进到目录内，直接用make命令就可以编译出来。
Makefile 里另外还带有一个“debug”目标，用命令“make debug”执行它就会编译一个calc.debug.exe出来，这是计算器程序的无优化带调试信息版本，方便你gdb。
提供了两个Makefile维护脚本 update_dependency.sh 和 update_object.sh。如果修改了任何源文件的include语句（不论是.cpp还是.h内的include语句），只要运行update_dependency.sh 就可以更新依赖信息。如果要添加或者删除代码文件，只要运行 update_object.sh 就可以更新编译目标。

为了让你练习递归，确保对参考答案充分理解，这次的参考答案里植入了若干bug。有些bug会让程序在特定情况下异常退出，有些bug让程序计算出错误的结果。请务必充分测试，修复每一个bug。（之后会发给你正确的参考答案，里面每个植入bug点都有注释可供对照）

还有一个追加的问题是：
参考答案里为了给每个表达式工厂按优先级排序，使用了数据结构 ordered_list<T,Compare>，它满足：
可以push元素进入容器
元素之间可通过比较器Compare比较，允许存在不分先后的元素
可以用begin()、end()获得迭代器，并按升序遍历所有元素
现在追加一个要求，请给ordered_list增加一个bool模版参数，用来标识遍历顺序为升序还是降序，并且默认为升序。