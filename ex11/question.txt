最近让你做了几次搜索问题，为了帮你总结复习，也为了庆祝国际劳动节，今天连出三道搜索题，让你一次做个够。

首先是一简单的搜索：
有一个不小于3*3的棋盘，棋盘上坐标(x1,y1)上有一个棋子马（如果是国际象棋的话就是骑士），没有其他棋子。问它至少经过多少步可以到达坐标(x2,y2)。
进一步的要求：打印步数最小的走法的其中一种，并尽可能减少内存消耗。

接着是一个经典智力题：
一个人，带着一只狼，一只羊，一捆菜过河。但河边的船很小，除了人之外，只能再带狼、羊、菜中的一个渡河。如果这个人把狼与羊留在岸边，狼会把羊吃掉；若羊与菜留在岸边，羊会吃掉菜。问以怎样的顺序，这个人才能把所有东西运到对岸？
进一步考虑：如果扩展为，一个人带着n件物品，其中某些物品不能在无人看管的情况下放在岸的同一边，而船可载m件物品。问题怎样解决？怎样优化？

最后来挑战一点难度：
俗话说，搬砖技术哪家强，古代埃及法老王。
古埃及人会使用分数进行计算，但是却有强迫症，只使用分子等于1的分数，而且相同的分母绝不同时使用（参见：http://en.wikipedia.org/wiki/Egyptian_fraction）。
举例来说，2/3这种low到不能再low的分数，古埃及人是绝对不会用的，需要用的时候会把它拆成若干分子为1的分数的和。但是如果拆成 1/3 + 1/3 这种显然不够文艺的形式，古埃及人也是不屑的。每个分母都一定不能重复，比如： 1/2 + 1/6，这样的加法式就被称为埃及分数。
虽然古埃及人任性到种族都灭绝了，但是20世纪的数学家终于证明出来：任意分数（也即有理数），都可以分解为埃及分数。
那么问题来了，任取一大于零的分数，求一个最短（加号数量最少）的埃及分数。

基于参考答案，再提几个问题：
埃及分数这个程序，search函数里有一个核心的for循环，循环的初始值是：target.lower * size / target.upper 。这里使用了整型数据的除法，由于整型除法会导致截断误差，那么这里这样写会导致什么问题？
马走日的参考答案里，使用了一个队列和map记录目前正在队列中排队的Step。容易发现，队列中的排队的状态按坐标分布在棋盘上，是一个由起点为中心，厚度不超过3的圆环，那么队列的长度就应该线性相关于这个圆的长度，其最大值小于棋盘变长的2Pi倍，也就是说整个程序的空间复杂度应该是O(N)。利用程序里的对象计数器，观察最大计数是否符合O(N)复杂度，为什么？
过河的参考答案对题目中物品的数目和关系都做了扩展，但船的容量仍限制为农夫外加一个物品。把这个程序扩展为可以设置船的容量。